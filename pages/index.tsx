import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import styles from "../styles/Home.module.css";

import { useEffect, useState } from "react";

import { connect, ConnectedProps } from "react-redux";
import { RootState } from "../app/store";
import { fetchTables as fetchTablesAction } from "../features/db/dbSlice";
import { RequestStatus } from "../features/db/types";
import { setDayFilter as setDayFilterAction } from "../features/filter/filterSlice";

import AppBarChess from "../components/AppBarChess";
import MainTable from "../components/MainTable";
import SelectDay from "../components/SelectDay";

function mapStateToProps(state: RootState) {
  return {
    allGames: state.db.games,
    users: state.filter.users,
    games: state.filter.games,
    //requestStatus: state.filter.status,
    isFilterReady: state.filter.isReady,
    mainTable: state.filter.mainTable,
  };
}

const mapDispatchToProps = {
  fetchTables: fetchTablesAction,
  setDayFilter: setDayFilterAction,
};

const connector = connect(mapStateToProps, mapDispatchToProps);

type PropsFromRedux = ConnectedProps<typeof connector>;

const Home: React.FC<PropsFromRedux> = (props: PropsFromRedux) => {
  const { allGames, users, games, mainTable, isFilterReady, fetchTables } =
    props;

  //const [day, setDay] = useState("all");

  useEffect(() => {
    console.log("index useEffect()");
    console.log("process.env.NODE_ENV: ", process.env.NODE_ENV);

    fetchTables()
      .unwrap()
      .then(() => props.setDayFilter("all"));
  }, [fetchTables]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Chess</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <AppBarChess />

        {!isFilterReady ? (
          <h2>Loading...</h2>
        ) : (
          <>
            <SelectDay
              days={getDistinctDays(allGames)}
              onChange={props.setDayFilter}
            />
            <MainTable users={users} games={games} mainTable={mainTable} />
          </>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default connector(Home);

// helper functions

function getDistinctDays(games: Array<any>): Array<string> {
  const dayArray = games.map((game) => game.day);

  return [...new Set(dayArray)];
}
