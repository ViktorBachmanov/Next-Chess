import type { InferGetStaticPropsType } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";

import { useEffect, useMemo } from "react";

import { db } from "../lib/db";

import { ThemeProvider } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";

import { RootState, store } from "../app/store";
import { useAppDispatch, useAppSelector } from "../app/hooks";
import { assignTables } from "../features/db/dbSlice";
import { User, Game } from "../features/db/types";

import {
  setInitialMainTable,
  filterGamesAndUsersByDay,
  mainTableObject,
  setGameTable,
  setDayFilter,
} from "../features/filter/filterSlice";
import { Order } from "../features/filter/types";

import Layout from "../components/Layout";

import createMainTheme from "../features/theme/muiTheme";
import { LightStatus } from "../features/theme/types";
import { setLightStatus } from "../features/theme/themeSlice";
import { setLoginStatus } from "../features/auth/authSlice";

import { Storage } from "../constants";

function Home({
  users,
  games,
  mainTable,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const dispatch = useAppDispatch();

  useEffect(() => {
    dispatch(setLightStatus(getInitialLightMode()));
    window.addEventListener("beforeunload", saveInLocalStorage);

    const authToken = localStorage.getItem(Storage.TOKEN);
    if (authToken) {
      dispatch(setLoginStatus(true));
    }

    return function cleanUp() {
      window.removeEventListener("beforeunload", saveInLocalStorage);
    };
  }, []);

  useEffect(() => {
    const allUsers = JSON.parse(users) as Array<any>;
    const allGames = JSON.parse(games) as Array<any>;
    const initialMainTable = JSON.parse(mainTable) as Array<any>;

    dispatch(setInitialMainTable(initialMainTable));
    dispatch(assignTables({ users: allUsers, games: allGames }));
    dispatch(setDayFilter("all"));
    dispatch(setGameTable());
  }, [users, games, dispatch]);

  const lightMode = useAppSelector(
    (state: RootState) => state.theme.lightStatus
  );

  const mainTheme = useMemo(() => createMainTheme(lightMode), [lightMode]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Chess</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ThemeProvider theme={mainTheme}>
        <CssBaseline />
        <Layout />
      </ThemeProvider>
    </div>
  );
}

// This function gets called at build time on server-side.
// It won't be called on client-side, so you can even do
// direct database queries.
export async function getStaticProps() {
  // Call an external API endpoint to get posts.
  // You can use any data fetching library

  let allUsers: User[];
  let allGames: Game[];

  [allUsers, allGames] = await Promise.all([
    db.query<User[]>("SELECT * FROM users ORDER BY rating DESC"),
    db.query<Game[]>("SELECT * FROM games ORDER BY id DESC"),
  ]);

  db.end();

  const { games, users } = filterGamesAndUsersByDay(allGames, allUsers, "all");

  mainTableObject.regenerate(games, users);
  const mainTable = mainTableObject.getTableOrderedBy(Order.RATING);

  return {
    props: {
      users: JSON.stringify(allUsers),
      games: JSON.stringify(allGames),
      mainTable: JSON.stringify(mainTable),
    },
  };
}

export default Home;

// helper functions

function saveInLocalStorage() {
  localStorage.setItem(
    Storage.LIGHT_MODE,
    JSON.stringify(store.getState().theme.lightStatus)
  );
}

function getInitialLightMode(): LightStatus {
  const storageStatus = localStorage.getItem(Storage.LIGHT_MODE);
  if (storageStatus) {
    return JSON.parse(storageStatus);
  } else {
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? LightStatus.DARK
      : LightStatus.LIGHT;
  }
}
